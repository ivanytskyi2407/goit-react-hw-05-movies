{"version":3,"file":"static/js/56.81eae7af.chunk.js","mappings":"qSAAMA,EAAW,gCACXC,EAAM,mCAAZ,SAEeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,2GAAsCC,EAAtC,+BAA4C,GAAIC,EAAhD,+BAAyD,GAAzD,SACyBC,MAAMF,EAAKC,GADpC,YACQE,EADR,QAEkBC,GAFlB,iCAGYD,EAASE,OAHrB,gDAIMC,QAAQC,OAAO,IAAIC,MAAM,cAJ/B,2GAOO,SAASC,IACd,OAAOV,EAAuB,GAAD,OAAIF,EAAJ,sCAA0CC,IAGlE,SAASY,EAAcC,GAC5B,OAAOZ,EAAuB,GAAD,OAAIF,EAAJ,kBAAsBc,EAAtB,oBAAwCb,IAGhE,SAASc,EAAcD,GAC5B,OAAOZ,EAAuB,GAAD,OACxBF,EADwB,iBACPc,EADO,4BACmBb,IAG3C,SAASe,EAAiBF,GAC/B,OAAOZ,EAAuB,GAAD,OACxBF,EADwB,iBACPc,EADO,4BACmBb,IAG3C,SAASgB,EAAgBC,GAC9B,OAAOhB,EAAuB,GAAD,OACxBF,EADwB,gCACQC,EADR,iCACoCiB,M,wGC7BnE,EAA6B,2BAA7B,EAAwE,8BAAxE,EAAwH,gCAAxH,EAA+J,qBAA/J,EAA2L,qB,kBCK5K,SAASC,IACtB,OAAwBC,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAYF,EAAaG,IAAI,SAAW,IAE9CC,EAAAA,EAAAA,YAAU,WACRN,GAAa,GACTI,IACFX,EAAAA,EAAAA,IAAgBW,GACbG,MAAK,YAAkB,IAAfC,EAAc,EAAdA,QACPV,EAAQU,MAETC,SAAQ,WACPT,GAAa,QAGlB,CAACI,IAQJ,OACE,gCACGL,IAAa,SAACW,EAAA,EAAD,KACd,kBAAMC,UAAWC,EAAcC,SATd,SAAAC,GACnBA,EAAEC,iBACF,IAAMrB,EAAQoB,EAAEE,OAAOC,OAAOC,MAC9Bf,EAAgB,CAAEgB,KAAMzB,KAMtB,WACE,mBAAQiB,UAAWC,EAAiBQ,KAAK,YACzC,kBACET,UAAWC,EACXQ,KAAK,SACLC,KAAK,SACLC,aAAa,MACbC,WAAS,EACTC,YAAY,qBAGhB,eAAIb,UAAWC,EAAf,SACGf,GACCA,EAAK4B,KAAI,YAAoB,IAAjBC,EAAgB,EAAhBA,GAAIC,EAAY,EAAZA,MACd,OACE,eAAahB,UAAWC,EAAxB,UACE,SAAC,KAAD,CAAMD,UAAWC,EAAQgB,GAAE,UAAKF,GAAhC,UACE,wBAAKC,OAFAD","sources":["services/API.js","webpack://react-homework-template/./src/views/Movies/Movies.module.css?58de","views/Movies/Movies.js"],"sourcesContent":["const BASE_URL = 'https://api.themoviedb.org/3/';\nconst KEY = '084ca305e7a4e4bb3dbbc7b67e975385';\n\nasync function fetchWithErrorHandling(url = '', config = {}) {\n  const response = await fetch(url, config);\n  return response.ok\n    ? await response.json()\n    : Promise.reject(new Error('Not found'));\n}\n\nexport function FetchTrending() {\n  return fetchWithErrorHandling(`${BASE_URL}trending/movie/day?api_key=${KEY}`);\n}\n\nexport function FetchFilmById(filmId) {\n  return fetchWithErrorHandling(`${BASE_URL}/movie/${filmId}?api_key=${KEY}`);\n}\n\nexport function FetchFilmCast(filmId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}movie/${filmId}/credits?api_key=${KEY}`\n  );\n}\nexport function FetchFilmReviews(filmId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}movie/${filmId}/reviews?api_key=${KEY}`\n  );\n}\nexport function FetchFilmSearch(query) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}search/movie?api_key=${KEY}&language=en-US&query=${query}`\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"SearchForm\":\"Movies_SearchForm__7XrUl\",\"SearchFormbtn\":\"Movies_SearchFormbtn__AdCDE\",\"SearchFormInput\":\"Movies_SearchFormInput__PzRC0\",\"list\":\"Movies_list__ZnodN\",\"item\":\"Movies_item__ga-mi\"};","import { useState, useEffect } from 'react';\nimport { FetchFilmSearch } from '../../services/API';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport s from './Movies.module.css';\nimport { Loader } from '../../components/Loader/Loader';\n\nexport default function Movies() {\n  const [data, setData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const filmQuery = searchParams.get('film') || '';\n\n  useEffect(() => {\n    setIsLoading(true);\n    if (filmQuery) {\n      FetchFilmSearch(filmQuery)\n        .then(({ results }) => {\n          setData(results);\n        })\n        .finally(() => {\n          setIsLoading(false);\n        });\n    }\n  }, [filmQuery]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const query = e.target.search.value;\n    setSearchParams({ film: query });\n  };\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      <form className={s.SearchForm} onSubmit={handleSubmit}>\n        <button className={s.SearchFormbtn} type=\"submit\" />\n        <input\n          className={s.SearchFormInput}\n          type=\"search\"\n          name=\"search\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search films\"\n        />\n      </form>\n      <ul className={s.list}>\n        {data &&\n          data.map(({ id, title }) => {\n            return (\n              <li key={id} className={s.item}>\n                <Link className={s.item} to={`${id}`}>\n                  <h3>{title}</h3>\n                </Link>\n              </li>\n            );\n          })}\n      </ul>\n    </>\n  );\n}\n"],"names":["BASE_URL","KEY","fetchWithErrorHandling","url","config","fetch","response","ok","json","Promise","reject","Error","FetchTrending","FetchFilmById","filmId","FetchFilmCast","FetchFilmReviews","FetchFilmSearch","query","Movies","useState","data","setData","isLoading","setIsLoading","useSearchParams","searchParams","setSearchParams","filmQuery","get","useEffect","then","results","finally","Loader","className","s","onSubmit","e","preventDefault","target","search","value","film","type","name","autoComplete","autoFocus","placeholder","map","id","title","to"],"sourceRoot":""}