{"version":3,"file":"static/js/473.859ab2f3.chunk.js","mappings":"sSAAMA,EAAW,gCACXC,EAAM,mCAAZ,SAEeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,2GAAsCC,EAAtC,+BAA4C,GAAIC,EAAhD,+BAAyD,GAAzD,SACyBC,MAAMF,EAAKC,GADpC,YACQE,EADR,QAEkBC,GAFlB,iCAGYD,EAASE,OAHrB,gDAIMC,QAAQC,OAAO,IAAIC,MAAM,cAJ/B,2GAOO,SAASC,IACd,OAAOV,EAAuB,GAAD,OAAIF,EAAJ,sCAA0CC,IAGlE,SAASY,EAAcC,GAC5B,OAAOZ,EAAuB,GAAD,OAAIF,EAAJ,kBAAsBc,EAAtB,oBAAwCb,IAGhE,SAASc,EAAcD,GAC5B,OAAOZ,EAAuB,GAAD,OACxBF,EADwB,iBACPc,EADO,4BACmBb,IAG3C,SAASe,EAAiBF,GAC/B,OAAOZ,EAAuB,GAAD,OACxBF,EADwB,iBACPc,EADO,4BACmBb,IAG3C,SAASgB,EAAgBC,GAC9B,OAAOhB,EAAuB,GAAD,OACxBF,EADwB,gCACQC,EADR,iCACoCiB,M,oIC7BnE,EAAuB,sB,SCIR,SAASC,IACtB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAUA,OARAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,WAAMN,GAAN,0FACOJ,EAAAA,EAAAA,IAAiBI,GADxB,gBACXO,EADW,EACXA,QACRH,EAAWG,GAFQ,2CAAH,sDAIlBD,EAAaN,KACZ,CAACA,KAGF,8BACGG,GAAWA,EAAQK,OAAS,GAC3B,wBACGL,EAAQM,KAAI,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,EAAoBC,GAApB,OACX,gBAAIC,UAAWC,EAAf,WACE,qCAAaJ,MACb,uBAAIC,MAFsBD,SAOhC","sources":["services/API.js","webpack://react-homework-template/./src/views/Reviews/Reviews.module.css?ff11","views/Reviews/Reviews.js"],"sourcesContent":["const BASE_URL = 'https://api.themoviedb.org/3/';\nconst KEY = '084ca305e7a4e4bb3dbbc7b67e975385';\n\nasync function fetchWithErrorHandling(url = '', config = {}) {\n  const response = await fetch(url, config);\n  return response.ok\n    ? await response.json()\n    : Promise.reject(new Error('Not found'));\n}\n\nexport function FetchTrending() {\n  return fetchWithErrorHandling(`${BASE_URL}trending/movie/day?api_key=${KEY}`);\n}\n\nexport function FetchFilmById(filmId) {\n  return fetchWithErrorHandling(`${BASE_URL}/movie/${filmId}?api_key=${KEY}`);\n}\n\nexport function FetchFilmCast(filmId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}movie/${filmId}/credits?api_key=${KEY}`\n  );\n}\nexport function FetchFilmReviews(filmId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}movie/${filmId}/reviews?api_key=${KEY}`\n  );\n}\nexport function FetchFilmSearch(query) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}search/movie?api_key=${KEY}&language=en-US&query=${query}`\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Reviews_item__Nzdax\"};","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { FetchFilmReviews } from '../../services/API';\nimport s from './Reviews.module.css';\n\nexport default function Reviews() {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState(null);\n\n  useEffect(() => {\n    const fetchReviews = async movieId => {\n      const { results } = await FetchFilmReviews(movieId);\n      setReviews(results);\n    };\n    fetchReviews(movieId);\n  }, [movieId]);\n\n  return (\n    <>\n      {reviews && reviews.length > 0 ? (\n        <ul>\n          {reviews.map(({ author, content, id }) => (\n            <li className={s.item} key={author}>\n              <h2>Author: {author}</h2>\n              <p>{content}</p>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>We don't have any reviews for this movie</p>\n      )}\n    </>\n  );\n}\n"],"names":["BASE_URL","KEY","fetchWithErrorHandling","url","config","fetch","response","ok","json","Promise","reject","Error","FetchTrending","FetchFilmById","filmId","FetchFilmCast","FetchFilmReviews","FetchFilmSearch","query","Reviews","movieId","useParams","useState","reviews","setReviews","useEffect","fetchReviews","results","length","map","author","content","id","className","s"],"sourceRoot":""}